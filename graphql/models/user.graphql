extend type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    # Filters by name. Accepts SQL LIKE wildcards `%` and `_`.
    # users(name: String @where(operator: "like")): [User!]! @paginate(defaultCount: 10)
   
    allUsers: [User!]! @paginate
    # userById(id: ID! @eq): User @find
    userById(id: ID! @whereKey): User @find

    # @eq directive filters the query to only return users where the id exactly matches the provided value
    # The exclamation mark (!) means that this argument is non-nullable, 
    # which means that you must provide an id value when you call this query. 
    # If you don't provide it, the query will fail.

    users: [User!]! @hasMany(relation: "tasks") 
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    tasks: [Task!] @hasMany
}